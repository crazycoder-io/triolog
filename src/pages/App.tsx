import React from "react";
import {
    Grid,
    Toolbar,
    AppBar,
    ButtonGroup,
    Button,
    List,
    ListItemText,
    ListItem,
    CircularProgress,
} from "@material-ui/core";
import firebase from "../firebase";
import {Tool} from "../components";
import "../styles/App.css";

const db = firebase.default.firestore();

function App() {
    const [subjectList, setSubjectList] = React.useState<Array<{id: string; subject: string}> | []>([]);
    const [listLoading, setListLoading] = React.useState<boolean>(false);

    const [tools] = React.useState([
        {
            text: "test1",
        },
        {
            text: "test2",
        },
        {
            text: "tes3",
        },
    ]);
    const [work, setWork] = React.useState<Array<{text: string}>>([]);

    // const [, addToWorkPanel] = useDrop(() => ({
    //     accept: "tools",
    // }));

    // const [, createClone] = useDrop(() => ({
    //     accept: "design",
    // }));

    const moveTool = (item: {text: string}) => {
        if (item && item.text !== "") {
            setWork(prev => [...prev, item]);
        }
    };

    React.useEffect(() => {
        async function getSubjects() {
            setListLoading(true);
            const subjects = await db.collection("subjects").get();
            subjects.forEach(doc => {
                if (!subjectList.some(d => d.id === doc.id)) {
                    setSubjectList(prev => [...prev, {id: doc.id, subject: doc.data().subject}]);
                }
            });
            setListLoading(false);
        }

        getSubjects();
    }, []);

    return (
        <div className="container">
            {/* <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head> */}

            <Grid container>
                <Grid item xs={12}>
                    <AppBar position="static">
                        <Toolbar variant="dense">
                            <ButtonGroup variant="text" aria-label="small outlined button group">
                                <Button size="small" variant="contained">
                                    File
                                </Button>
                                <Button size="small" variant="contained">
                                    Window
                                </Button>
                                <Button size="small" variant="contained">
                                    Edit
                                </Button>
                                <Button size="small" variant="contained">
                                    Navigation
                                </Button>
                            </ButtonGroup>
                        </Toolbar>
                    </AppBar>
                </Grid>
                <Grid container className="workPanel">
                    <Grid item md={2} className="listPanel">
                        <List component="data" aria-label="primary" className="list">
                            {listLoading && <CircularProgress />}
                            {subjectList.length > 0 &&
                                subjectList.map(subject => (
                                    <ListItem color="blue" button key={subject.id}>
                                        <ListItemText color="red" primary={subject.subject} />
                                    </ListItem>
                                ))}
                        </List>
                    </Grid>
                    <Grid container direction="column" md={8}>
                        <Grid item className="designPanel">
                            <div className="workField">
                                {work.map(item => (
                                    <Tool key={item.text} item={item} onDrop={moveTool} />
                                ))}
                            </div>
                        </Grid>
                        <Grid item className="errorPanel">
                            Error Panel
                        </Grid>
                    </Grid>
                    <Grid item md={2} className="toolPanel">
                        <ul>
                            {tools.map(item => (
                                <Tool key={item.text} item={item} onDrop={moveTool} />
                            ))}
                        </ul>
                    </Grid>
                </Grid>
            </Grid>
        </div>
    );
}

export default App;
