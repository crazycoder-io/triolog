import React, {useEffect, useState} from "react";
import {Grid, List, ListItemText, ListItem, CircularProgress} from "@material-ui/core";
import {useDispatch, useSelector} from "react-redux";
import firebase from "../firebase";
import {Tool, LogPanel, NavBar, Collection} from "../components";
import types from "../types/DNDTypes";
import {ToolsReducerState} from "../types/store.types";
import {fillToolList, addToWorkPanel, moveItemOnWorkPanel} from "../store/actions/tools";
import GenerateKey from "../utils/GenerateKey";
import "../styles/App.css";

const db = firebase.default.firestore();

function App() {
    const dispatch = useDispatch();
    const [subjectList, setSubjectList] = useState<Array<{id: string; subject: string}> | []>([]);
    const [listLoading, setListLoading] = useState<boolean>(false);
    const [logs, setLogs] = useState<Array<{title: string; message: string; time: string}>>([]);

    const toolsProps = useSelector((state: ToolsReducerState) => state.toolsReducer);
    const {tools, workPlace} = toolsProps;

    const addTool = (item: {key?: string; type: string; Component: JSX.Element}, offset: {x: number; y: number}) => {
        if (item && item.type !== "") {
            const key = GenerateKey();
            dispatch(addToWorkPanel({key, type: item.type, Component: item.Component, offset}));
            // setWorkplace(prev => [...prev, {key: item.key, type: item.type, Component: item.Component, offset}]);
            setLogs(prev => [
                ...prev,
                {title: "New Tool", message: "Added new tool - " + key, time: new Date().toUTCString()},
            ]);
        }
    };

    useEffect(() => {
        dispatch(
            fillToolList([
                {
                    type: types.COLLECTION_COMPONENT,
                    Component: <Collection />,
                },
            ])
        );
    }, []);

    const moveTool = (item: {key?: string; type: string; Component: JSX.Element}, offset: {x: number; y: number}) => {
        if (item && item.key !== "") {
            dispatch(moveItemOnWorkPanel({...item, offset}));
            setLogs(prev => [
                ...prev,
                {
                    title: "Move Tool",
                    message: item.key + " moved to X:" + offset.x + " Y:" + offset.y,
                    time: new Date().toUTCString(),
                },
            ]);
        }
    };

    useEffect(() => {
        async function getSubjects() {
            setListLoading(true);
            const subjects = await db.collection("subjects").get();
            subjects.forEach(doc => {
                if (!subjectList.some(d => d.id === doc.id)) {
                    setSubjectList(prev => [...prev, {id: doc.id, subject: doc.data().subject}]);
                }
            });
            setListLoading(false);
        }

        getSubjects();
    }, []);

    return (
        <div className="container">
            {/* <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head> */}

            <Grid container>
                <Grid item xs={12}>
                    <NavBar />
                </Grid>
                <Grid container className="workPanel">
                    <Grid item md={2} className="listPanel">
                        <List component="data" aria-label="primary" className="list">
                            {listLoading && <CircularProgress />}
                            {subjectList.length > 0 &&
                                subjectList.map(subject => (
                                    <ListItem button key={subject.id} className="list-item">
                                        <ListItemText
                                            className="list-item-text"
                                            color="black"
                                            primary={subject.subject}
                                        />
                                    </ListItem>
                                ))}
                        </List>
                    </Grid>
                    <Grid item container direction="column" md={8}>
                        <Grid item className="designPanel">
                            <div className="workField">
                                {workPlace.map(item => (
                                    <div
                                        key={item.key}
                                        style={{
                                            position: item.offset.x ? "absolute" : "initial",
                                            left: item.offset.x ? item.offset.x + "px" : "",
                                            top: item.offset.y ? item.offset.y + "px" : "",
                                        }}>
                                        <Tool disabled={false} item={item} onDrop={moveTool} />
                                    </div>
                                ))}
                            </div>
                        </Grid>
                        <Grid item className="logPanel">
                            <LogPanel logs={logs} />
                        </Grid>
                    </Grid>
                    <Grid item md={2} className="toolPanel">
                        <ul>
                            {tools.map(({Component, type}, index) => (
                                <Tool disabled={true} key={index} onDrop={addTool} item={{type, Component}} />
                            ))}
                        </ul>
                    </Grid>
                </Grid>
            </Grid>
        </div>
    );
}

export default App;
